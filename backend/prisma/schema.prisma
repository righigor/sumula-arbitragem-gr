generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Table to store the championships
model Championship {
  id          String   @id @default(cuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  city        String
  state       String
  country     String
  address     String
  owner       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams             Team[]
  playerApparatus   PlayerApparatus[]
  playerCompetition PlayerCompetition[]
  apparatus         Apparatus[]
  categories        Category[]
  referees          Referee[]
  scoreTypes        ScoreType[]

  @@map("championships")
}

// Table to store the apparatus
model Apparatus {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionId String
  competition   Championship @relation(fields: [competitionId], references: [id])

  playerApparatus PlayerApparatus[]

  @@map("apparatus")
}

// Table to store the teams
model Team {
  id   String  @id @default(cuid())
  name String
  logo String?

  championshipId String
  championship   Championship @relation(fields: [championshipId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staff   Staff[]
  players Player[]

  @@map("teams")
}

// Table to store the staff
model Staff {
  id    String  @id @default(cuid())
  name  String
  email String?
  phone String?
  role  String

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}

// Table to store the players
model Player {
  id        String   @id @default(cuid())
  name      String
  birthDate DateTime
  level     Int

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  scores            PlayerScore[]
  playerApparatus   PlayerApparatus[]
  playerCompetition PlayerCompetition[]

  @@map("players")
}

// Table to store the player's scores by apparatus
model PlayerApparatus {
  id String @id @default(cuid())

  playerId String
  player   Player @relation(fields: [playerId], references: [id])

  apparatusId String
  apparatus   Apparatus @relation(fields: [apparatusId], references: [id])

  competitionId String
  competition   Championship @relation(fields: [competitionId], references: [id])

  totalScore Float // total score of the player in the apparatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([playerId, apparatusId, competitionId])
  @@map("player_apparatus")
}

// Table to store the player's total scores by competition
model PlayerCompetition {
  id String @id @default(cuid())

  competitionId String
  competition   Championship @relation(fields: [competitionId], references: [id])

  playerId String
  player   Player @relation(fields: [playerId], references: [id])

  totalScore Float // total score of the player in the competition

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("player_competitions")
}

// Table to store the categories
model Category {
  id    String @id @default(cuid())
  name  String
  level Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionId String
  competition   Championship @relation(fields: [competitionId], references: [id])

  players Player[]

  @@map("categories")
}

// Table to store the referees
model Referee {
  id    String  @id @default(cuid())
  name  String
  email String?
  phone String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionId String
  competition   Championship @relation(fields: [competitionId], references: [id])

  playerScore PlayerScore[]

  @@map("referees")
}

// Table to store the score types
model ScoreType {
  id   String @id @default(cuid())
  name String // name of the score type

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionId String
  competition   Championship @relation(fields: [competitionId], references: [id])

  PlayerScore PlayerScore[]

  @@map("score_types")
}

// Table to store the player's scores by the referees by score type
model PlayerScore {
  id    String @id @default(cuid())
  score Float // score given by the referee

  playerId String
  player   Player @relation(fields: [playerId], references: [id])

  scoreTypeId String
  scoreType   ScoreType @relation(fields: [scoreTypeId], references: [id])

  refereeId String
  referee   Referee @relation(fields: [refereeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("player_scores")
}
